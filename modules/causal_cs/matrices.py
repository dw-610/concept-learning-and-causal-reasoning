"""
This module contains CATE matrices corresponding to different DAGs.

Naming convention: <data>_<task>_<method>

Data options:
- sc: shapes and colors

Task options:
- shapes: shape classification
- colors: color classification

Method options:
- hand: hand-crafted
- modpc: modified PC algorithm
- full: full bipartite graph
"""

# ------------------------------------------------------------------------------
# imports

import numpy as np

# ------------------------------------------------------------------------------

sc_shapes = np.array([
    [ 0.01996629, -0.2522    , -0.08622918,      np.nan],
    [ 0.54135755,      np.nan, -0.02575128, -0.6936    ],
    [-0.19723104,      np.nan,  0.10036567, -0.50921302],
    [-0.30931776,      np.nan,  0.00499987,  0.71204206],
    [-0.15141369,  0.0394544 , -0.00540071,      np.nan],
])

sc_shapes_refutation = {
    'common_cause_passed': np.array([
        [ 1.,  1.,      0.,  np.nan],
        [ 1.,  np.nan,  1.,  1.],
        [ 1.,  np.nan,  1.,  1.],
        [ 1.,  np.nan,  1.,  0.],
        [ 1.,  1.,      1.,  np.nan],
    ]),
    'common_cause_effects': np.array([
        [-0.01202883, -0.21413111, -0.0394975 ,      np.nan],
        [ 0.58123549,      np.nan, -0.01758523, -0.61330926],
        [-0.08761091,      np.nan, -0.0360052 , -0.19658799],
        [-0.05231715,      np.nan, -0.01131087,  0.09855919],
        [-0.27209727, -0.03466511, -0.01066329,      np.nan],
    ]),
    'common_cause_p_values': np.array([
        [0.35029657, 0.41604675, 0.04515968,     np.nan],
        [0.32970335,     np.nan, 0.364437  , 0.33007685],
        [0.33492886,     np.nan, 0.16430289, 0.14460566],
        [0.19753328,     np.nan, 0.44627725, 0.01796392],
        [0.31629504, 0.2753913 , 0.46615794,     np.nan],
    ]),
    'subset_passed': np.array([
        [ 1.,  1.,      1.,  np.nan],
        [ 1.,  np.nan,  1.,  1.],
        [ 1.,  np.nan,  1.,  1.],
        [ 1.,  np.nan,  1.,  0.],
        [ 1.,  1.,      1.,  np.nan],
    ]),
    'subset_effects': np.array([
        [ 0.0148976 , -0.39478444, -0.04703077,      np.nan],
        [ 0.56447794,      np.nan, -0.01851369, -0.58343481],
        [-0.01225033,      np.nan, -0.01032281, -0.28234295],
        [-0.0190354 ,      np.nan, -0.01724071,  0.0723255 ],
        [-0.29116538, -0.02038872, -0.02132846,      np.nan],
    ]),
    'subset_p_values': np.array([
        [0.47923422, 0.25914943, 0.09691288,     np.nan],
        [0.42328441,     np.nan, 0.40750585, 0.27073512],
        [0.20925114,     np.nan, 0.16697428, 0.23588736],
        [0.14528833,     np.nan, 0.42688299, 0.02410673],
        [0.32708531, 0.36290208, 0.43948586,     np.nan],
    ])
}

# ------------------------------------------------------------------------------

sc_colors = np.array([
    [ 0.07410869, -0.01065047, -0.19277645,      np.nan],
    [ 0.08464915,  0.01354622,  0.04940511,      np.nan],
    [     np.nan, -0.21785471,  0.09123812,      np.nan],
    [ 0.209279  ,      np.nan, -0.23687816,  0.04864059],
    [-0.61784761,  0.0034953 ,      np.nan,  0.4338415 ],
])

sc_colors_refutation = {
    'common_cause_passed': np.array([
        [ 1.,      1.,      0.,      np.nan],
        [ 1.,      1.,      1.,      np.nan],
        [ np.nan,  1.,      1.,      np.nan],
        [ 1.,      np.nan,  0.,      1.],
        [ 1.,      1.,      np.nan,  1.],
    ]),
    'common_cause_effects': np.array([
        [ 0.11846345, -0.00753191, -0.08609921,      np.nan],
        [ 0.09076252, -0.02845588, -0.02033278,      np.nan],
        [     np.nan, -0.26843121,  0.16377573,      np.nan],
        [ 0.10099237,      np.nan, -0.04466273,  0.10084763],
        [-0.60071315,  0.00375222,      np.nan,  0.49628088],
    ]),
    'common_cause_p_values': np.array([
        [3.35927149e-01, 4.66997466e-01, 3.11814881e-02,         np.nan],
        [4.61772108e-01, 3.03356373e-01, 1.14966076e-01,         np.nan],
        [        np.nan, 1.10117489e-01, 8.20438422e-02,         np.nan],
        [1.50646626e-01,         np.nan, 1.82495316e-05, 6.99088268e-02],
        [4.48110715e-01, 4.96137807e-01,         np.nan, 2.79040473e-01],
    ]),
    'subset_passed': np.array([
        [ 1.,      1.,      0.,      np.nan],
        [ 1.,      1.,      0.,      np.nan],
        [ np.nan,  1.,      1.,      np.nan],
        [ 1.,      np.nan,  0.,      1.],
        [ 1.,      1.,      np.nan,  1.],
    ]),
    'subset_effects': np.array([
        [ 1.27133444e-01, -1.82772589e-02, -7.77376518e-02,          np.nan],
        [ 9.47233767e-02, -1.54515349e-02, -5.88944156e-03,          np.nan],
        [         np.nan, -2.95566300e-01,  1.66015652e-01,          np.nan],
        [ 1.72272257e-01,          np.nan, -6.29584358e-02,  8.00776089e-02],
        [-6.32670891e-01,  3.53590000e-04,          np.nan,  4.76311431e-01],
    ]),
    'subset_p_values': np.array([
        [3.03192969e-01, 4.61120839e-01, 4.90424895e-02,         np.nan],
        [4.56106853e-01, 2.57860551e-01, 1.80004235e-02,         np.nan],
        [        np.nan, 1.57195238e-01, 1.74844208e-01,         np.nan],
        [3.84441239e-01,         np.nan, 9.50393446e-06, 3.75254414e-01],
        [4.50857256e-01, 4.63149918e-01,         np.nan, 2.89908550e-01],
    ])
}

# ------------------------------------------------------------------------------

scy_isSpeedLimit = np.array([
    [-0.00946774]
    [-0.33404416]
    [ 0.0773    ]
    [ 0.06678311]
    [-0.25745979]
    [-0.1446523 ]
    [     np.nan]
    [ 0.17604331]
    [-0.11043592]
    [-0.15747794]
    [ 0.19017016]
    [ 0.11644017]
    [-0.20008149]
    [-0.28569099]
    [-0.22415035]
    [-0.45612573]
    [ 0.26346273]
    [ 0.3456488 ]
    [-0.51518297]
    [ 0.1903332 ]
])

scy_isSpeedLimit_refutation = {
    'common_cause_passed': np.array([
        [ 1.],
        [ 0.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ np.nan],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.]
    ]),
    'common_cause_effects': np.array([
        [-0.02083368],
        [-0.14488056],
        [ 0.01563306],
        [ 0.0668864 ],
        [-0.23730231],
        [-0.14005982],
        [     np.nan],
        [ 0.24788811],
        [-0.0415684 ],
        [ 0.24289849],
        [ 0.1849788 ],
        [ 0.17516654],
        [-0.14677498],
        [-0.30222853],
        [-0.23492079],
        [-0.36122923],
        [ 0.14046236],
        [ 0.54217526],
        [-0.31185434],
        [ 0.24738013]
    ]),
    'common_cause_p_values': np.array([
        [0.45023391],
        [0.04798196],
        [0.21971882],
        [0.49938414],
        [0.31606095],
        [0.46467858],
        [    np.nan],
        [0.38748597],
        [0.20314041],
        [0.00358473],
        [0.48171493],
        [0.17354669],
        [0.31970334],
        [0.4346247 ],
        [0.4639008 ],
        [0.12484929],
        [0.15732395],
        [0.14438777],
        [0.00111515],
        [0.19699366]
    ]),
    'subset_passed': np.array([
        [ 1.],
        [ 0.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ np.nan],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.]
    ]),
    'subset_effects': np.array([
        [-0.00265965],
        [-0.15168824],
        [-0.00613667],
        [ 0.03598009],
        [-0.22339012],
        [-0.11649413],
        [     np.nan],
        [ 0.23118942],
        [-0.05571984],
        [ 0.07982456],
        [ 0.19333294],
        [ 0.18180183],
        [-0.13339459],
        [-0.32439141],
        [-0.19405151],
        [-0.31047556],
        [ 0.0799236 ],
        [ 0.50610031],
        [-0.30412477],
        [ 0.23780923]
    ]),
    'subset_p_values': np.array([
        [0.4677466 ],
        [0.04227905],
        [0.15134504],
        [0.36618164],
        [0.2613782 ],
        [0.38960799],
        [    np.nan],
        [0.41076668],
        [0.27750295],
        [0.18448206],
        [0.49009011],
        [0.2429622 ],
        [0.2958475 ],
        [0.41053747],
        [0.41323202],
        [0.18936985],
        [0.11718163],
        [0.16909067],
        [0.00256967],
        [0.37442185]
    ])
}

# ------------------------------------------------------------------------------

mats = {
    'sc_shapes': sc_shapes,
    'sc_colors': sc_colors,
    'scy_isSpeedLimit_lingam': scy_isSpeedLimit,
}
"""
Dictionary of effect matrices.
"""

# ------------------------------------------------------------------------------

if __name__ == '__main__':

    import matplotlib.pyplot as plt

    mats = {
        # 'sc_shapes_hand': sc_shapes_hand,
        # 'sc_shapes_modpc': sc_shapes_modpc,
        # 'sc_shapes_full': sc_shapes_full,
        # 'sc_colors_hand': sc_colors_hand,
        # 'sc_colors_modpc': sc_colors_modpc,
        # 'sc_colors_full': sc_colors_full,
        'scy_isSpeedLimit_lingam': scy_isSpeedLimit_lingam,
    }
    
    # xlabels = ['u0', 'u1', 'u2', 'u3']
    xlabels = ['u']
    ylabels = ['s0', 's1', 'c0', 'c1', 'c2', 'y0', 'y1', 'y2', 'y3', 'y4', 
               'y5', 'y6', 'y7', 'y8', 'y9']
    
    for name, mat in mats.items():
        mat = np.nan_to_num(mat)
        n_mat = np.abs(mat)
        n_mat = n_mat / np.max(n_mat)
        row_sums = np.sum(n_mat, axis=1)

        print(f'\n{name}:')
        print()
        print(np.round(mat, 3))
        print()
        print(np.round(n_mat, 3))
        print()
        print(np.round(row_sums, 3))

        plt.figure(figsize=(3, 3))
        plt.imshow(n_mat, cmap='inferno')
        plt.xticks(range(len(xlabels)), xlabels)
        plt.yticks(range(len(ylabels)), ylabels)
        plt.colorbar()
        plt.show()