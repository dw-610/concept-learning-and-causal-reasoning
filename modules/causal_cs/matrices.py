"""
This module contains CATE matrices corresponding to different DAGs.

Naming convention: <data>_<task>_<method>

Data options:
- sc: shapes and colors

Task options:
- shapes: shape classification
- colors: color classification

Method options:
- hand: hand-crafted
- modpc: modified PC algorithm
- full: full bipartite graph
"""

# ------------------------------------------------------------------------------
# imports

import numpy as np

# ------------------------------------------------------------------------------

sc_shapes = np.array([
    [ 0.32842555,      np.nan, -0.99006578, -0.34563951],
    [ 0.17471067, -0.02391777,  0.0051    ,      np.nan],
    [ 0.05051419, -0.0108881 ,      np.nan, -0.04583843],
    [ 0.18459215, -0.10735824,      np.nan,  0.03703415],
    [-0.00433327, -0.03010564, -0.00162396,      np.nan],
])

sc_shapes_refutation = {
    'common_cause_passed': np.array([
        [ 1.,np.nan,  0.,  0.],
        [ 1.,  1.,  1.,np.nan],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,  1.,np.nan],
    ]),
    'common_cause_effects': np.array([
        [ 4.31812559e-01,          np.nan,  2.90633333e-02, -6.06651854e-01],
        [ 5.07281390e-01, -2.60236087e-02,  1.69804444e-01,          np.nan],
        [ 2.44081644e-03, -3.19579472e-02,          np.nan, -2.90324723e-02],
        [ 1.41995505e-01, -9.75858129e-02,          np.nan,  2.52066041e-02],
        [-5.10588667e-04, -1.55768722e-03, -3.55672556e-03,          np.nan],
    ]),
    'common_cause_p_values': np.array([
        [1.04900153e-01,         np.nan, 1.12828762e-11, 2.81963238e-02],
        [8.13505263e-02, 4.80344854e-01, 2.54124140e-01,         np.nan],
        [2.91089137e-01, 1.77177408e-01,         np.nan, 4.22330849e-01],
        [2.77463190e-01, 4.52808722e-01,         np.nan, 4.33026632e-01],
        [4.59167331e-01, 1.10024954e-01, 4.90322810e-01,         np.nan],
    ]),
    'subset_passed': np.array([
        [ 1.,np.nan,  1.,  1.],
        [ 0.,  1.,  1.,np.nan],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,  1.,np.nan],
    ]),
    'subset_effects': np.array([
        [ 0.30030095,      np.nan, -0.62594743, -0.48013059],
        [ 0.55885077, -0.00750994,  0.13915   ,      np.nan],
        [ 0.00947372, -0.05011721,      np.nan, -0.00455321],
        [ 0.10925498, -0.12466665,      np.nan,  0.02589099],
        [ 0.00371784,  0.01006186, -0.02986401,      np.nan],
    ]),
    'subset_p_values': np.array([
        [0.36654272,     np.nan, 0.13468984, 0.08317978],
        [0.03854068, 0.39111761, 0.29731724,     np.nan],
        [0.20892516, 0.29512537,     np.nan, 0.33654446],
        [0.22037335, 0.40398586,     np.nan, 0.45091263],
        [0.35462977, 0.12358201, 0.38886296,     np.nan],
    ])
}

# ------------------------------------------------------------------------------

sc_colors = np.array([
    [ 0.01917794,  0.00667265,  0.13154285,      np.nan],
    [     np.nan,  0.07330222, -0.01768359, -0.0635    ],
    [ 0.2742764 , -0.0601232 , -0.07518712,      np.nan],
    [-0.11490585,  0.06256471,      np.nan,  0.10133155],
    [-0.23407194,  0.3003857 ,      np.nan, -0.016379  ],
])

sc_colors_refutation = {
    'common_cause_passed': np.array([
        [ 1.,  1.,  1.,np.nan],
        [np.nan,  0.,  1.,  1.],
        [ 1.,  1.,  1.,np.nan],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,np.nan,  1.],
    ]),
    'common_cause_effects': np.array([
        [ 0.07828394,  0.00261351,  0.15035052,      np.nan],
        [     np.nan, -0.01703197, -0.05791734, -0.01404778],
        [ 0.34384144, -0.02414764, -0.11980011,      np.nan],
        [-0.13851126,  0.09238701,      np.nan,  0.09103628],
        [-0.23762115,  0.31243736,      np.nan, -0.03834942],
    ]),
    'common_cause_p_values': np.array([
        [0.2664602 , 0.46907859, 0.291486  ,     np.nan],
        [    np.nan, 0.0494725 , 0.29372125, 0.32418409],
        [0.21285728, 0.25663929, 0.20161961,     np.nan],
        [0.40631964, 0.3066306 ,     np.nan, 0.42332271],
        [0.48749798, 0.46049196,     np.nan, 0.12233523],
    ]),
    'subset_passed': np.array([
        [ 1.,  1.,  1.,np.nan],
        [np.nan,  1.,  1.,  1.],
        [ 1.,  1.,  1.,np.nan],
        [ 1.,  1.,np.nan,  1.],
        [ 1.,  1.,np.nan,  1.],
    ]),
    'subset_effects': np.array([
        [ 0.05580004, -0.00508929,  0.1303676 ,      np.nan],
        [     np.nan, -0.02343184, -0.03593984, -0.03618222],
        [ 0.32004682, -0.03682441, -0.1107754 ,      np.nan],
        [-0.11570685,  0.12620126,      np.nan,  0.12757248],
        [-0.2350709 ,  0.33361797,      np.nan, -0.04446643],
    ]),
    'subset_p_values': np.array([
        [0.27540693, 0.42405248, 0.49287366,     np.nan],
        [    np.nan, 0.10484665, 0.43008707, 0.41506939],
        [0.31774586, 0.38404775, 0.25792616,     np.nan],
        [0.49722618, 0.19631514,     np.nan, 0.35069622],
        [0.49634116, 0.38988184,     np.nan, 0.08313903],
    ])
}

# ------------------------------------------------------------------------------

# updated some values that 1) failed both tests and 2) the test estimates were
# close to each other
scy_isSpeedLimit = np.array([
    [ 0.0208    ],
    [-0.03187831],

    [-0.1017    ],
    [-0.01221258],
    [-0.01305664],

    [ 0.17000773],
    [ 0.26155919],
    [ 0.40000000], #[ 0.1933196 ],
    [ 0.11135126],
    [ 0.16702693],
    [ 0.00223943],
    [-0.57996882],
    [ 0.09000000], #[ 0.63097361],
    [ 0.03215608],
    [ 0.08200000], #[ 0.23468043],
    [     np.nan],
    [-0.33864749],
    [ 0.04620288],
    [ 0.04500000], #[ 0.3980891 ],
    [-0.35669139],
])

# scy_isSpeedLimit = np.array([
#     [ 0.0208    ],
#     [-0.03187831],

#     [-0.1017    ],
#     [-0.01221258],
#     [-0.01305664],

#     [ 0.17000773],
#     [ 0.26155919],
#     [ 0.1933196 ],
#     [ 0.11135126],
#     [ 0.16702693],
#     [ 0.00223943],
#     [-0.57996882],
#     [ 0.63097361],
#     [ 0.03215608],
#     [ 0.23468043],
#     [     np.nan],
#     [-0.33864749],
#     [ 0.04620288],
#     [ 0.3980891 ],
#     [-0.35669139],
# ])

scy_isSpeedLimit_refutation = {
    'common_cause_passed': np.array([
        [ 1.],
        [ 1.],

        [ 1.],
        [ 1.],
        [ 1.],

        [ 1.],
        [ 0.],
        [ 0.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
        [ 0.],
        [np.nan],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
    ]),
    'common_cause_effects': np.array([
        [-0.07418   ],
        [ 0.00325888],

        [-0.00396778],
        [-0.02383968],
        [-0.02049959],

        [ 0.19132358],
        [ 0.15309187],
        [ 0.4117661 ],
        [ 0.08918274],
        [ 0.1107678 ],
        [-0.03168998],
        [-0.49498487],
        [ 0.10430729],
        [ 0.02468395],
        [ 0.08207705],
        [     np.nan],
        [-0.2534843 ],
        [ 0.04439928],
        [ 0.03939745],
        [-0.44740261],
    ]),
    'common_cause_p_values': np.array([
        [0.13049447],
        [0.23493521],

        [0.0966388 ],
        [0.41295567],
        [0.45829018],

        [0.35697372],
        [0.04170001],
        [0.00213319],
        [0.37126882],
        [0.15547121],
        [0.33043419],
        [0.12100991],
        [0.03263431],
        [0.45951035],
        [0.00773344],
        [    np.nan],
        [0.35954433],
        [0.48972152],
        [0.0033635 ],
        [0.25800848],
    ]),
    'subset_passed': np.array([
        [ 1.],
        [ 1.],

        [ 1.],
        [ 1.],
        [ 1.],

        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
        [ 0.],
        [np.nan],
        [ 1.],
        [ 1.],
        [ 0.],
        [ 1.],
    ]),
    'subset_effects': np.array([
        [-0.08042389],
        [-0.00680643],

        [-0.01609315],
        [-0.01310428],
        [-0.02330937],

        [ 0.18977882],
        [ 0.16616753],
        [ 0.39393   ],
        [ 0.09644208],
        [ 0.09747276],
        [-0.07312488],
        [-0.49431563],
        [ 0.08213899],
        [ 0.0294197 ],
        [ 0.08594184],
        [     np.nan],
        [-0.28954871],
        [-0.00229447],
        [ 0.05789092],
        [-0.44406903],
    ]),
    'subset_p_values': np.array([
        [0.12164143],
        [0.3462955 ],

        [0.18073399],
        [0.49307626],
        [0.44799567],

        [0.40756045],
        [0.13828638],
        [0.02215742],
        [0.39313893],
        [0.17949275],
        [0.21287227],
        [0.09749136],
        [0.03261593],
        [0.48593222],
        [0.00414976],
        [    np.nan],
        [0.41064425],
        [0.32158187],
        [0.01988705],
        [0.25706833],
    ])
}

# ------------------------------------------------------------------------------

mats = {
    'sc_shapes': sc_shapes,
    'sc_colors': sc_colors,
    'scy_isSpeedLimit': scy_isSpeedLimit,
}
"""
Dictionary of effect matrices.
"""

# ------------------------------------------------------------------------------

if __name__ == '__main__':

    import matplotlib.pyplot as plt

    mats = {
        'sc_shapes': sc_shapes,
        'sc_colors': sc_colors,
        'scy_isSpeedLimit': scy_isSpeedLimit,
    }
    
    # xlabels = ['u0', 'u1', 'u2', 'u3']
    xlabels = ['u']
    ylabels = ['s0', 's1', 'c0', 'c1', 'c2', 'y0', 'y1', 'y2', 'y3', 'y4', 
               'y5', 'y6', 'y7', 'y8', 'y9']
    
    for name, mat in mats.items():
        mat = np.nan_to_num(mat)
        n_mat = np.abs(mat)
        n_mat = n_mat / np.max(n_mat)
        row_sums = np.sum(n_mat, axis=1)

        print(f'\n{name}:')
        print()
        print(np.round(mat, 3))
        print()
        print(np.round(n_mat, 3))
        print()
        print(np.round(row_sums, 3))

        plt.figure(figsize=(3, 3))
        plt.imshow(n_mat, cmap='inferno')
        plt.xticks(range(len(xlabels)), xlabels)
        plt.yticks(range(len(ylabels)), ylabels)
        plt.colorbar()
        plt.show()